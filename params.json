{"name":"git-utils","tagline":"Native Git Node Module","body":"# Git Node module [![Build Status](https://travis-ci.org/atom/git-utils.png)](https://travis-ci.org/atom/git-utils)\r\n\r\nHelpers for working with Git repositories built natively on top of\r\n[libgit2](http://libgit2.github.com).\r\n\r\nThis module requires [CMake](http://www.cmake.org/) for building libgit2 and it\r\nis a prerequisite for both installing this module and building it locally.\r\n\r\n## Installing\r\n\r\n```sh\r\nnpm install git-utils\r\n```\r\n\r\n## Building\r\n  * Clone the repository with the `--recurse` option to get the libgit2\r\n    submodule\r\n  * Install [CMake](http://www.cmake.org/)\r\n  * Run `npm install`\r\n  * Run `grunt` to compile the native and CoffeeScript code\r\n  * Run `grunt test` to run the specs\r\n\r\n## Docs\r\n\r\n### git.open(path)\r\n\r\nOpen the repository at the given path.  This will return `null` if the\r\nrepository at the given path does not exist or cannot be opened.\r\n\r\n```coffeescript\r\ngit = require 'git-utils'\r\n\r\nrepository = git.open('/Users/me/repos/node')\r\n```\r\n\r\n### Repository.checkoutHead(path)\r\n\r\nRestore the contents of a path in the working directory and index to the\r\nversion at HEAD. Similar to running `git reset HEAD -- <path>` and then a\r\n`git checkout HEAD -- <path>`.\r\n\r\n`path` - The string repository-relative path to checkout.\r\n\r\nReturns `true` if the checkout was successful, `false` otherwise\r\n\r\n### Repository.getAheadBehindCount()\r\n\r\nGet the number of commits the HEAD branch is ahead/behind the remote branch it\r\nis tracking.  Similar to the commit numbers reported by `git status` when a\r\nremote tracking branch exists.\r\n\r\nReturns an object with `ahead` and `behind` keys pointing to integer values\r\nthat will always be >= 0.\r\n\r\n### Repository.getCommitCount(fromCommit, toCommit)\r\n\r\nGet the number of commits between `fromCommit` and `toCommit`.\r\n\r\n`fromCommit` - The string commit SHA-1 to start the rev walk at.\r\n\r\n`toCommit` - The string commit SHA-1 to end the rev walk at.\r\n\r\nReturns the number of commits between the two, always >= 0.\r\n\r\n### Repository.getConfigValue(key)\r\n\r\nGet the config value of the given key.\r\n\r\n`key` - The string key to retrieve the value for.\r\n\r\nReturns the configuration value, may be `null`.\r\n\r\n### Repository.getDiffStats(path)\r\n\r\nGet the number of lines added and removed comparing the working directory\r\ncontents of the given path to the HEAD version of the given path.\r\n\r\n`path` - The string repository-relative path to diff.\r\n\r\nReturns an object with `added` and `deleted` keys pointing to integer values\r\nthat always be >= 0.\r\n\r\n### Repository.getHeadBlob(path)\r\n\r\nGet the blob contents of the given path at HEAD. Similar to\r\n`git show HEAD:<path>`.\r\n\r\n`path` - The string repository-relative path.\r\n\r\nReturns the string contents of the HEAD version of the path.\r\n\r\n### Repository.getHead()\r\n\r\nGet the reference or SHA-1 that HEAD points to such as `refs/heads/master`\r\nor a full SHA-1 if the repository is in a detached HEAD state.\r\n\r\nReturns the string reference name or SHA-1.\r\n\r\n### Repository.getLineDiffs(path, text)\r\n\r\nGet the line diffs comparing the HEAD version of the given path and the given\r\ntext.\r\n\r\n`path` - The string repository-relative path.\r\n\r\n`text` - The string text to diff the HEAD contents of the path against.\r\n\r\nReturns an array of objects that have `oldStart`, `oldLines`, `newStart`, and\r\n`newLines` keys pointing to integer values, may be `null` if the diff fails.\r\n\r\n### Repository.getMergeBase(commit1, commit2)\r\n\r\nGet the merge base of two commits.\r\n\r\n`commit1` - The string SHA-1 of the first commit.\r\n\r\n`commit2` - The string SHA-1 of the second commit.\r\n\r\nReturns the string SHA-1 of the merge base of `commit1` and `commit2` or `null`\r\nif there isn't one.\r\n\r\n### Repository.getPath()\r\n\r\nGet the path of the repository.\r\n\r\nReturns the string absolute path of the opened repository.\r\n\r\n### Repository.getReferenceTarget(ref)\r\n\r\nGet the target of the given reference.\r\n\r\n`ref` - The string reference.\r\n\r\nReturns the string target of the given reference.\r\n\r\n### Repository.getShortHead()\r\n\r\nGet a possibly shortened version of value returns by `getHead()`. This will\r\nremove leading segments of `refs/heads`, `refs/tags`, or `refs/remotes` and will\r\nalso shorten the SHA-1 of a detached HEAD to 7 characters.\r\n\r\nReturns a string shortened reference name or SHA-1.\r\n\r\n### Repository.getStatus([path])\r\n\r\nGet the status of a single path or all paths in the repository.  This will not\r\ninclude ignored paths.\r\n\r\n`path` - An optional repository-relative path to limit the status reporting to.\r\n\r\nReturns an integer status number if a path is specified and returns an object\r\nwith path keys and integer status values if no path is specified.\r\n\r\n### Repository.getUpstreamBranch([branch])\r\n\r\nGet the upstream branch of the given branch.\r\n\r\n`branch` - The branch to find the upstream branch of (default: `HEAD`)\r\n\r\nReturns the string upstream branch reference name.\r\n\r\n### Repository.getWorkingDirectory()\r\n\r\nGet the working directory of the repository.\r\n\r\nReturns the string absolute path to the repository's working directory.\r\n\r\n### Repository.isIgnored(path)\r\n\r\nGet the ignored status of a given path.\r\n\r\n`path` - The string repository-relative path.\r\n\r\nReturns `true` if the path is ignored, `false` otherwise.\r\n\r\n### Repository.isPathModified(path)\r\n\r\nGet the modified status of a given path.\r\n\r\n`path` - The string repository-relative path.\r\n\r\nReturns `true` if the path is modified, `false` otherwise.\r\n\r\n### Repository.isPathNew(path)\r\n\r\nGet the new status of a given path.\r\n\r\n`path` - The string repository-relative path.\r\n\r\nReturns `true` if the path is new, `false` otherwise.\r\n\r\n### Repository.isStatusModified(status)\r\n\r\nCheck if a status value represents a modified path.\r\n\r\n`status` - The integer status value.\r\n\r\nReturns `true` if the status is a modified one, `false` otherwise.\r\n\r\n### Repository.isStatusNew(status)\r\n\r\nCheck if a status value represents a new path.\r\n\r\n`status` - The integer status value.\r\n\r\nReturns `true` if the status is a new one, `false` otherwise\r\n\r\n### Repository.isSubmodule(path)\r\n\r\nCheck if the path is a submodule in the index.\r\n\r\n`path` - The string repository-relative path.\r\n\r\nReturns `true` if the path is a submodule, `false` otherwise.\r\n\r\n### Repository.refreshIndex()\r\n\r\nReread the index to update any values that have changed since the last time the\r\nindex was read.\r\n\r\n### Repository.relativize(path)\r\n\r\nRelativize the given path to the repository's working directory.\r\n\r\n`path` - The string path to relativize.\r\n\r\nReturns a repository-relative path if the given path is prefixed with the\r\nrepository's working directory path.\r\n\r\n### Repository.release()\r\n\r\nRelease the repository and close all file handles it has open.  No other methods\r\ncan be called on the `Repository` object once it has been released.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
